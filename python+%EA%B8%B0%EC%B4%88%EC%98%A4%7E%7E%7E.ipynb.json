{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-3-1c536103df15>, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-3-1c536103df15>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    python =\u001b[0m\n\u001b[0m             ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "#멀티캠퍼스 스터디\n",
    "\n",
    "python = \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#사칙연산\n",
    "add = 2+3\n",
    "divide = 2 /4\n",
    "mutiply = 2* 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#변수에 숫자 대입하고 계신하기\n",
    "add + mutiply"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'GON~~~~~~~~~~~~'"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#변수에 문자 대입하고 출력\n",
    "\n",
    "mul = \"GON~~~~~~~~~~~~\"\n",
    "\n",
    "mul\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b is bigger than zero\n"
     ]
    }
   ],
   "source": [
    "#조건문 if\n",
    "\n",
    "b=3\n",
    "\n",
    "if b>0 :\n",
    "    print(\"b is bigger than zero\")#들여쓰기의 중요성 스페이스 네개의 공간\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "#반복문 for\n",
    "for a in [1,2,3]:\n",
    "    print(a)\n",
    "    \n",
    "    \n",
    "#for문을 이용하여 실행해야 할 문장을 여러 번 반복해서 실행시킬수 있음\n",
    "#1,2,3이라는 리스트의 앞에서부터 하나씩 꺼내어 a라는 변수에 대입시킨 수 print(a)를 수행해라아!\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "#반복문 while\n",
    "\n",
    "i=0\n",
    "\n",
    "while i<3: #i값이 3보다 작은 동안 \n",
    "    i=i+1 #i = i + 1과 print (i)를 수행\n",
    "    print(i) #i = i+ 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n"
     ]
    }
   ],
   "source": [
    "#함수\n",
    "#def : 함수를 만들때 사용\n",
    "def sum(a,b): #sum이라는 함수를 만듬. a,b는 입력값이고, a+b는 결과값\n",
    "    return a+b #3,4가 입력으로 들어오면 3+4를 수행하고 결과값인 7\n",
    "\n",
    "print(sum(a,b))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is one\n",
      "This is two\n",
      "He's short\n"
     ]
    }
   ],
   "source": [
    "#문자열 자료형\n",
    "\n",
    "one = \"This is one\"\n",
    "print(one)\n",
    "two = 'This is two'\n",
    "print(two)\n",
    "short= \"He's short\"\n",
    "print(short)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I can add string\n",
      "----------------------------------------------------------------------------------------------------\n",
      "Example\n"
     ]
    }
   ],
   "source": [
    "#문자열 연산\n",
    "\n",
    "Ican = \"I can\"\n",
    "add = \" add\"\n",
    "string = \" string\"\n",
    "\n",
    "print(Ican+add+string)\n",
    "\n",
    "a =\"-\"\n",
    "\n",
    "print(a * 100)\n",
    "\n",
    "print(\"Example\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i\n",
      " \n",
      "p\n",
      "y\n",
      "p\n"
     ]
    }
   ],
   "source": [
    "#문자열 indexing \n",
    "\n",
    "p=\"python is easy\"\n",
    "\n",
    "print(p[7])\n",
    "\n",
    "print(p[6])\n",
    "\n",
    "print(p[0]) #0부터 숫자를 샌다. \n",
    "\n",
    "print(p[-1])\n",
    "\n",
    "print(p[-0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "python\n",
      "python\n",
      "python i\n",
      "thon is easy\n"
     ]
    }
   ],
   "source": [
    "#만약 python라는 단어만 뽑아내고 싶다고면? -> 문자열 슬라이싱\n",
    "\n",
    "print(p[0:6])\n",
    "\n",
    "print(p[:6])\n",
    "\n",
    "print(p[:8])\n",
    "\n",
    "print(p[2:])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "e\n",
      "abcdefghij\n"
     ]
    }
   ],
   "source": [
    "yungu = \"abedefghij\"\n",
    "\n",
    "print(yungu[2])\n",
    "\n",
    "\n",
    "\n",
    "print(yungu[:2]+\"c\"+yungu[3:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 3, 5, 7, 9]\n"
     ]
    }
   ],
   "source": [
    " #리스트자료형\n",
    "odd = [1,3,5,7,9] #리스트를 만들때는 대괄호로 감싸주고 각 요소 값들을 쉼표로 구분\n",
    "print(odd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n",
      "['I', 'can', 'make', 'a', 'list']\n",
      "[1, 2, 3, 'string', 'string2']\n",
      "[1, 2, 3, 'string', 'string2']\n",
      "[1, 2, 3, ['string', 'string2']]\n"
     ]
    }
   ],
   "source": [
    "#리스트의 종류\n",
    "non = [] #빈 리스트\n",
    "num=[1,2,3,3,35,25,6] #숫자가 요소인 리스트\n",
    "stringlist = [ \"I\",\"can\",'make','a','list'] #문자가 요소인 리스트\n",
    "numandstr=[1,2,3,'string','string2'] #숫자와 문자열을 함께 요소로 가진 리스트\n",
    "twolist=[1,2,3,['string','string2']] #리스트 자체를 요소로 가진 리스트\n",
    "         \n",
    "\n",
    "print (non)\n",
    "print (stringlist)\n",
    "print (numandstr)\n",
    "print (numandstr)\n",
    "print (twolist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'string'"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "twoli=[1,2,[\"string\",\"string3\"]]\n",
    "twoli[2][0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'asda'"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "same=\"asdadasdasdasdasd\"\n",
    "same[:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1: 'hi'}\n",
      "{'house': ['beer', 'cat', 'movie'], 'campus': ['chair', 'computer']}\n",
      "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n",
      "hi\n",
      "['chair', 'computer']\n"
     ]
    }
   ],
   "source": [
    "#딕셔너리 자료형\n",
    "\n",
    "dictionary={1 : 'hi'} # 1: 키 2: value 값을 가진 것들을 딕셔너리 라고 한다. 게임 ~ 도 있고~~\n",
    "\n",
    "dictionary2={'campus' : ['chair','computer'], 'house':['beer','cat','movie']} #이렇게 여러가지일때는 리스트로\n",
    "\n",
    "print(dictionary)\n",
    "print(dictionary2)\n",
    "\n",
    "print(\"_ \"*50)\n",
    "\n",
    "print(dictionary[1])#딕셔너리의 벨류값 출력\n",
    "print(dictionary2['campus'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "set([1, 2, 3])\n",
      "set(['A', 'y', 'u', 'g', 'n'])\n"
     ]
    }
   ],
   "source": [
    "#집합자료형\n",
    "s1=set([1,2,3]) #set의 괄호 안에 리스트 혹은 문자열을 만듬\n",
    "\n",
    "s2=set(\"Annyung\")\n",
    "\n",
    "print(s1)\n",
    "\n",
    " 허용하지 않는다, 순서가 없다\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3]"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#set을 리스트로 변화하려면 \n",
    "settolist=list(s1)\n",
    "\n",
    "settolist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n",
      "3\n",
      "2\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "#자료형의 참과 거짓??\n",
    "#값이 비어있으면 거짓\n",
    "\n",
    "p = [1,2,3,4] #리스트 \n",
    "\n",
    "while p: #p가 참인동안\n",
    "    print(p.pop()) #리스트의 마지막 요소를 하나씩 꺼낸다\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "if[]:# 만약 []가 참이면\n",
    "    print(\"True\")\n",
    "else:\n",
    "    print(\"False\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#numpy, pandas, if, while, for문의 설명과 예는 원하면 다음 스터디때!!"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "celltoolbar": "Raw Cell Format",
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
